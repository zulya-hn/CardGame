{"version":3,"sources":["webpack://vue-card-game/src/css/common.css","webpack://vue-card-game/src/App.vue"],"names":[],"mappings":"AAAA;EACE,kDAAsD;EACtD,sBAAsB;AACxB;;AAEA;EACE,kDAAsD;EACtD,sBAAsB;AACxB;AACA;EACE,kDAAsD;EACtD,sBAAsB;AACxB;;AAEA;EACE,kDAAsD;EACtD,sBAAsB;AACxB;;AAEA;EACE,kDAAsD;EACtD,sBAAsB;AACxB;;AAEA;EACE,kDAAsD;EACtD,sBAAsB;AACxB;;AAEA;EACE,kDAAsD;EACtD,sBAAsB;AACxB;;AAEA;EACE,kDAAsD;EACtD,sBAAsB;AACxB;;AAEA;EACE,kDAAsD;EACtD,sBAAsB;AACxB;;AAEA;EACE,kDAAsD;EACtD,sBAAsB;AACxB;;AAEA;EACE,kDAAsD;EACtD,sBAAsB;AACxB;;AAEA;EACE,kDAAsD;EACtD,sBAAsB;AACxB;;;ACgGA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;AAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;AAEA;IACA;IACA;AACA;AAEA;IACA;IACA;AACA;AAEA;IACA;IACA;IACA;IACA;AACA;AAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;AAEA;IACA;IACA;AACA;AAEA;IACA;AACA;AAEA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;AAEA;IACA;IACA;IACA;AACA;AAEA;IACA;IACA;AACA","file":"main.css","sourcesContent":[".card-jh {\r\n  background: url('../img/card-jh.jpg') 0 -6px no-repeat;\r\n  background-size: cover;\r\n}\r\n\r\n.card-jc {\r\n  background: url('../img/card-jc.jpg') 0 -6px no-repeat;\r\n  background-size: cover;\r\n}\r\n.card-js {\r\n  background: url('../img/card-js.jpg') 0 -6px no-repeat;\r\n  background-size: cover;\r\n}\r\n\r\n.card-qs {\r\n  background: url('../img/card-qs.jpg') 0 -6px no-repeat;\r\n  background-size: cover;\r\n}\r\n\r\n.card-qc {\r\n  background: url('../img/card-qc.jpg') 0 -6px no-repeat;\r\n  background-size: cover;\r\n}\r\n\r\n.card-qh {\r\n  background: url('../img/card-qh.jpg') 0 -6px no-repeat;\r\n  background-size: cover;\r\n}\r\n\r\n.card-qd {\r\n  background: url('../img/card-qd.jpg') 0 -6px no-repeat;\r\n  background-size: cover;\r\n}\r\n\r\n.card-kd {\r\n  background: url('../img/card-kd.jpg') 0 -6px no-repeat;\r\n  background-size: cover;\r\n}\r\n\r\n.card-kh {\r\n  background: url('../img/card-kh.jpg') 0 -6px no-repeat;\r\n  background-size: cover;\r\n}\r\n\r\n.card-kc {\r\n  background: url('../img/card-kc.jpg') 0 -6px no-repeat;\r\n  background-size: cover;\r\n}\r\n\r\n.card-ks {\r\n  background: url('../img/card-ks.jpg') 0 -6px no-repeat;\r\n  background-size: cover;\r\n}\r\n\r\n.card-td {\r\n  background: url('../img/card-td.jpg') 0 -6px no-repeat;\r\n  background-size: cover;\r\n}\r\n","<template>\n    <div>\n        <div v-if=\"openPairsCount === 12\">\n            <div class=\"bg\"></div>\n            <div class=\"popup\">\n                <h2>Congratulations! <br> Your time is {{ parseInt(timer / 60) }}:{{ timer % 60 }}</h2>\n                <button class=\"btn btn-primary\"\n                        @click=\"playAgain\">\n                    Play again!\n                </button>\n            </div>\n        </div>\n        <div class=\"wrapper\">\n            <h1 class=\"title\">\n                The Pairs\n            </h1>\n            <div class=\"progress\">\n                <div class=\"progress-bar\"\n                     :style=\"progressWidth\">\n                    {{ getProgressCount() }}\n                </div>\n            </div>\n            <div class=\"flip-cards\"\n                 :class=\"cardsFrozen ? 'frozen' : '' \"\n                 @click=\"startTimerTick()\">\n                <div v-for=\"(item, index) in deckOfCards\"\n                     :class=\"getClass(item)\"\n                     class=\"flip-card-inner\"\n                     @click=\"onClickCard(index, item)\"\n                >\n                    <div class=\"flip-card-front\">\n                    </div>\n                    <div class=\"flip-card-back\">\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport {getCards} from './helpers.js';\n\nexport default {\n    data() {\n        return {\n            cards: getCards(),\n            deckOfCards: [],\n            previousCardName: null,\n            previousCardIndex: null,\n            openPairsCount: 0,\n            cardsFrozen: false,\n            timerAlreadyStart: false,\n            timer: 0\n        };\n    },\n    created() {\n        this.createAndSortDeckOfCards();\n    },\n    computed: {\n        progressWidth() {\n            return {\n                width: (this.openPairsCount / this.cards.length * 100) + '%'\n            };\n        }\n    },\n    methods: {\n        getProgressCount() {\n            if(this.openPairsCount === 0) {\n                return '';\n            }\n\n            return (this.openPairsCount) + ' / ' + (this.cards.length);\n        },\n        getClass(item) {\n            return item.state + ' ' + item.name;\n        },\n        onClickCard(index, item) {\n            if (this.previousCardName === null) {\n                this.showCard(index);\n                this.previousCardName = item.name;\n                this.previousCardIndex = index;\n            } else if (this.previousCardName === item.name) {\n                this.showCard(index);\n                this.openPairsCount++;\n                this.previousCardName = null;\n                this.previousCardIndex = null;\n            } else {\n                this.showCard(index);\n\n                this.cardsFrozen = true;\n                setTimeout(() => {\n                    this.closeCard(index);\n                    this.closePrevCard();\n                    this.previousCardName = null;\n                    this.previousCardIndex = null;\n\n                    this.cardsFrozen = false;\n                }, 1250);\n            }\n        },\n\n        showCard(index) {\n            this.deckOfCards[index].state = 'open-card';\n        },\n        closeCard(index) {\n            this.deckOfCards[index].state = 'close-card';\n        },\n        closePrevCard() {\n            this.deckOfCards[this.previousCardIndex].state = 'close-card';\n        },\n\n        createAndSortDeckOfCards() {\n            for (let cardName of this.cards) {\n                for (let i = 1; i <= 2; i++) {\n                    this.deckOfCards.push({'state': 'close-card', 'name': cardName});\n                }\n            }\n\n            this.sortDeckOfCards();\n\n        },\n        sortDeckOfCards() {\n            this.deckOfCards.sort(() => Math.random() - 0.5);\n        },\n        startTimerTick() {\n            if (!this.timerAlreadyStart) {\n                this.timerAlreadyStart = true;\n                this.timerTick();\n            }\n        },\n        timerTick() {\n            if (this.openPairsCount < 12) {\n                setTimeout(() => {\n                    this.timer++;\n                    this.timerTick();\n                }, 1000);\n            }\n        },\n        playAgain() {\n            this.timerAlreadyStart = false;\n            this.timer = 0;\n            this.openPairsCount = 0;\n            this.deckOfCards = [];\n            this.createAndSortDeckOfCards();\n        }\n    },\n\n};\n</script>\n\n\n<style scoped>\n.bg {\n    position: fixed;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    background-color: #000;\n    opacity: 0.8;\n    z-index: 100;\n}\n\n.popup {\n    position: fixed;\n    top: calc(42vh - 98px);\n    left: 35%;\n    right: 35%;\n    padding: 40px 80px;\n    background-color: #B4AD9D;\n    text-align: center;\n    z-index: 200;\n    border-radius: 8px;\n}\n\n.wrapper {\n    margin: 0 auto;\n    width: 1300px;\n}\n\n.title {\n    text-align: center;\n    margin-bottom: 20px;\n}\n\n.flip-cards {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    transform: rotateY(180deg);\n}\n\n.flip-card-inner {\n    width: 150px;\n    height: 212px;\n    background-color: #FFF;\n    margin-bottom: 12px;\n    cursor: pointer;\n    box-shadow: 1px 1px 10px rgba(0, 0, 0, .75);\n    border-radius: 8px;\n    position: relative;\n    text-align: center;\n    transition: transform 0.6s;\n    transform-style: preserve-3d;\n}\n\n.open-card {\n    pointer-events: none;\n    transform: rotateY(180deg);\n}\n\n.frozen {\n    pointer-events: none;\n}\n\n.flip-card-front,\n.flip-card-back {\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    border-radius: 8px;\n    background-repeat: no-repeat;\n    position: absolute;\n    -webkit-backface-visibility: hidden;\n    backface-visibility: hidden;\n}\n\n.flip-card-back {\n    padding-top: 10px;\n    background-size: contain;\n    background-position-x: center;\n}\n\n.flip-card-front {\n    background: url('img/reverse.jpg') 0 -6px no-repeat;\n    background-size: cover;\n}\n\n\n</style>\n"],"sourceRoot":""}